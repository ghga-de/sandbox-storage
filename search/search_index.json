{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sandbox Storage Service","title":"Sandbox Storage Service"},{"location":"#sandbox-storage-service","text":"","title":"Sandbox Storage Service"},{"location":"installation/","text":"Setup and Installation","title":"Setup and Installation"},{"location":"installation/#setup-and-installation","text":"","title":"Setup and Installation"},{"location":"reference/config/","text":"API Config This module provides Configuration for the API get_config () Get the Config object that encapsulates all the configuration for this application. Returns: Type Description <function config_from_yaml.<locals>.decorator.<locals>.constructor_wrapper at 0x7f9568372c10> An instance of Config Source code in sandbox_storage/config.py @lru_cache def get_config () -> Config : \"\"\" Get the Config object that encapsulates all the configuration for this application. Returns: An instance of Config \"\"\" return Config ()","title":"API Config"},{"location":"reference/config/#api-config","text":"This module provides Configuration for the API","title":"API Config"},{"location":"reference/config/#sandbox_storage.config.get_config","text":"Get the Config object that encapsulates all the configuration for this application. Returns: Type Description <function config_from_yaml.<locals>.decorator.<locals>.constructor_wrapper at 0x7f9568372c10> An instance of Config Source code in sandbox_storage/config.py @lru_cache def get_config () -> Config : \"\"\" Get the Config object that encapsulates all the configuration for this application. Returns: An instance of Config \"\"\" return Config ()","title":"get_config()"},{"location":"reference/cors/","text":"CORS configuration Make CORS configurable cors_header_response_callback_factory ( config ) A factory for creating CORS header callbacks that are configured based on a Config object. Parameters: Name Type Description Default config Type[constructor_wrapper] The config for the application required Returns: Type Description Callable A callable object Source code in sandbox_storage/cors.py def cors_header_response_callback_factory ( config : Type [ Config ]) -> Callable : \"\"\" A factory for creating CORS header callbacks that are configured based on a ``Config`` object. Args: config: The config for the application Returns: A callable object \"\"\" def cors_headers_response_callback ( event : NewRequest ): \"\"\" CORS header callback that can be added to a pyramid config by: ``config.add_subscriber(<this_function>, NewRequest)`` \"\"\" def cors_headers ( _ : Request , response : Response ): \"\"\" Modifies Requests. \"\"\" response . headers . update ( { \"Access-Control-Allow-Origin\" : list_to_comma_sep_str ( config . cors_allowed_origins ), \"Access-Control-Allow-Methods\" : list_to_comma_sep_str ( config . cors_allowed_methods ), \"Access-Control-Allow-Headers\" : list_to_comma_sep_str ( config . cors_allowed_headers ), \"Access-Control-Allow-Credentials\" : \"true\" if config . cors_allow_credentials else \"false\" , } ) event . request . add_response_callback ( cors_headers ) return cors_headers_response_callback list_to_comma_sep_str ( list_of_str ) Join a list of strings into one comma-seperated string. Parameters: Name Type Description Default list_of_str List[str] A list of strings to concatenate required Returns The concatenated string Source code in sandbox_storage/cors.py def list_to_comma_sep_str ( list_of_str : List [ str ]) -> str : \"\"\" Join a list of strings into one comma-seperated string. Args: list_of_str: A list of strings to concatenate Returns The concatenated string \"\"\" if len ( list_of_str ) == 0 : return \"\" return \",\" . join ( list_of_str )","title":"CORS configuration"},{"location":"reference/cors/#cors-configuration","text":"Make CORS configurable","title":"CORS configuration"},{"location":"reference/cors/#sandbox_storage.cors.cors_header_response_callback_factory","text":"A factory for creating CORS header callbacks that are configured based on a Config object. Parameters: Name Type Description Default config Type[constructor_wrapper] The config for the application required Returns: Type Description Callable A callable object Source code in sandbox_storage/cors.py def cors_header_response_callback_factory ( config : Type [ Config ]) -> Callable : \"\"\" A factory for creating CORS header callbacks that are configured based on a ``Config`` object. Args: config: The config for the application Returns: A callable object \"\"\" def cors_headers_response_callback ( event : NewRequest ): \"\"\" CORS header callback that can be added to a pyramid config by: ``config.add_subscriber(<this_function>, NewRequest)`` \"\"\" def cors_headers ( _ : Request , response : Response ): \"\"\" Modifies Requests. \"\"\" response . headers . update ( { \"Access-Control-Allow-Origin\" : list_to_comma_sep_str ( config . cors_allowed_origins ), \"Access-Control-Allow-Methods\" : list_to_comma_sep_str ( config . cors_allowed_methods ), \"Access-Control-Allow-Headers\" : list_to_comma_sep_str ( config . cors_allowed_headers ), \"Access-Control-Allow-Credentials\" : \"true\" if config . cors_allow_credentials else \"false\" , } ) event . request . add_response_callback ( cors_headers ) return cors_headers_response_callback","title":"cors_header_response_callback_factory()"},{"location":"reference/cors/#sandbox_storage.cors.list_to_comma_sep_str","text":"Join a list of strings into one comma-seperated string. Parameters: Name Type Description Default list_of_str List[str] A list of strings to concatenate required Returns The concatenated string Source code in sandbox_storage/cors.py def list_to_comma_sep_str ( list_of_str : List [ str ]) -> str : \"\"\" Join a list of strings into one comma-seperated string. Args: list_of_str: A list of strings to concatenate Returns The concatenated string \"\"\" if len ( list_of_str ) == 0 : return \"\" return \",\" . join ( list_of_str )","title":"list_to_comma_sep_str()"},{"location":"reference/models/","text":"Models Database Models DrsObject GA4GH DRS Object that links to an S3 object.","title":"Models"},{"location":"reference/models/#models","text":"Database Models","title":"Models"},{"location":"reference/models/#sandbox_storage.models.DrsObject","text":"GA4GH DRS Object that links to an S3 object.","title":"DrsObject"},{"location":"reference/pubsub/","text":"Pub/Sub Consuming or Subscribing to Async Messaging Topics get_connection_params () Return a configuration object for pika Returns: Type Description ConnectionParameters An instance of pika.ConnectionParameters Source code in sandbox_storage/pubsub.py def get_connection_params () -> pika . ConnectionParameters : \"\"\" Return a configuration object for pika Returns: An instance of ``pika.ConnectionParameters`` \"\"\" config = get_config () return pika . ConnectionParameters ( host = config . rabbitmq_host , port = config . rabbitmq_port ) send_message ( drs_id , access_id , user_id ) Send a message when download request arrives Parameters: Name Type Description Default drs_id str the DRS ID for the file object required access_id str the access ID for the file object required user_id str the user ID required Source code in sandbox_storage/pubsub.py def send_message ( drs_id : str , access_id : str , user_id : str ) -> None : \"\"\" Send a message when download request arrives Args: drs_id: the DRS ID for the file object access_id: the access ID for the file object user_id: the user ID \"\"\" config = get_config () message = { \"drs_id\" : drs_id , \"access_id\" : access_id , \"user_id\" : user_id } topic = AmqpTopic ( connection_params = get_connection_params (), topic_name = config . topic_name , service_name = \"storage\" , ) topic . publish ( message )","title":"Pub/Sub"},{"location":"reference/pubsub/#pubsub","text":"Consuming or Subscribing to Async Messaging Topics","title":"Pub/Sub"},{"location":"reference/pubsub/#sandbox_storage.pubsub.get_connection_params","text":"Return a configuration object for pika Returns: Type Description ConnectionParameters An instance of pika.ConnectionParameters Source code in sandbox_storage/pubsub.py def get_connection_params () -> pika . ConnectionParameters : \"\"\" Return a configuration object for pika Returns: An instance of ``pika.ConnectionParameters`` \"\"\" config = get_config () return pika . ConnectionParameters ( host = config . rabbitmq_host , port = config . rabbitmq_port )","title":"get_connection_params()"},{"location":"reference/pubsub/#sandbox_storage.pubsub.send_message","text":"Send a message when download request arrives Parameters: Name Type Description Default drs_id str the DRS ID for the file object required access_id str the access ID for the file object required user_id str the user ID required Source code in sandbox_storage/pubsub.py def send_message ( drs_id : str , access_id : str , user_id : str ) -> None : \"\"\" Send a message when download request arrives Args: drs_id: the DRS ID for the file object access_id: the access ID for the file object user_id: the user ID \"\"\" config = get_config () message = { \"drs_id\" : drs_id , \"access_id\" : access_id , \"user_id\" : user_id } topic = AmqpTopic ( connection_params = get_connection_params (), topic_name = config . topic_name , service_name = \"storage\" , ) topic . publish ( message )","title":"send_message()"},{"location":"reference/routes/","text":"API routes Provides the API endpoints for storage. AccessMethod dataclass An AccessURL __json__ ( self , _ = None ) special JSON-renderer for this object. Source code in sandbox_storage/api.py def __json__ ( self , _ : Optional [ Request ] = None ) -> Dict [ str , Any ]: \"\"\"JSON-renderer for this object.\"\"\" return_dict : Dict [ str , Any ] = { \"type\" : self . type } if self . access_url : return_dict [ \"access_url\" ] = self . access_url . __json__ () if self . access_id : return_dict [ \"access_id\" ] = self . access_id return return_dict AccessURL dataclass Describes the URL for accessing the actual bytes of the object. __json__ ( self , _ = None ) special JSON-renderer for this object. Source code in sandbox_storage/api.py def __json__ ( self , _ : Optional [ Request ] = None ) -> Dict [ str , str ]: \"\"\"JSON-renderer for this object.\"\"\" return { \"url\" : self . url } DrsReturnObject dataclass A DrsObject __json__ ( self , _ = None ) special JSON-renderer for this object. Source code in sandbox_storage/api.py def __json__ ( self , _ : Optional [ Request ] = None ) -> Dict [ str , Any ]: \"\"\"JSON-renderer for this object.\"\"\" return_dict = { \"id\" : self . id , \"self_uri\" : self . self_uri , \"size\" : self . size , \"created_time\" : self . created_time , \"checksums\" : self . checksums , } if self . access_methods : return_dict [ \"access_methods\" ] = [ access_method . __json__ () for access_method in self . access_methods ] return return_dict get_app ( config_settings = ModSettings ( host = '127.0.0.1' , port = 8080 , log_level = 'info' , drs_path = 'drs://localhost:8080/' , api_path = '/ga4gh/drs/v1' , custom_spec_url = None , rabbitmq_host = 'rabbitmq' , rabbitmq_port = 5672 , topic_name = 'download_request' , db_path = 'postgresql://admin:admin@postgresql/storage' , s3_path = 'http://s3-localstack:4566' , cors_allowed_origins = [], cors_allow_credentials = False , cors_allowed_methods = [], cors_allowed_headers = [])) Builds the Pyramid app Parameters: Name Type Description Default config_settings Settings for the application ModSettings(host='127.0.0.1', port=8080, log_level='info', drs_path='drs://localhost:8080/', api_path='/ga4gh/drs/v1', custom_spec_url=None, rabbitmq_host='rabbitmq', rabbitmq_port=5672, topic_name='download_request', db_path='postgresql://admin:admin@postgresql/storage', s3_path='http://s3-localstack:4566', cors_allowed_origins=[], cors_allow_credentials=False, cors_allowed_methods=[], cors_allowed_headers=[]) Returns: Type Description Any An instance of Pyramid WSGI app Source code in sandbox_storage/api.py def get_app ( config_settings = CONFIG_SETTINGS ) -> Any : \"\"\" Builds the Pyramid app Args: config_settings: Settings for the application Returns: An instance of Pyramid WSGI app \"\"\" api_path = Path ( config_settings . api_path ) openapi_spec_path = Path ( __file__ ) . parent / \"openapi.yaml\" with Configurator () as pyramid_config : pyramid_config . add_directive ( \"pyramid_custom_openapi3_add_explorer\" , add_custom_explorer_view ) pyramid_config . add_subscriber ( cors_header_response_callback_factory ( config_settings ), NewRequest ) pyramid_config . include ( \"pyramid_openapi3\" ) pyramid_config . pyramid_openapi3_spec ( openapi_spec_path , route = str ( api_path / \"openapi.yaml\" ) ) pyramid_config . pyramid_custom_openapi3_add_explorer ( route = str ( api_path ), custom_spec_url = config_settings . custom_spec_url ) pyramid_config . add_route ( \"hello\" , \"/\" ) pyramid_config . add_route ( \"health\" , \"/health\" ) pyramid_config . add_route ( \"objects_id\" , str ( api_path / \"objects\" / \" {object_id} \" ) ) pyramid_config . add_route ( \"objects_id_access_id\" , str ( api_path / \"objects\" / \" {object_id} \" / \"access\" / \" {access_id} \" ), ) pyramid_config . scan ( \".\" ) return pyramid_config . make_wsgi_app () get_health ( _ , __ ) Check for the health of the service. Source code in sandbox_storage/api.py @view_config ( route_name = \"health\" , renderer = \"json\" , openapi = False , request_method = \"GET\" ) def get_health ( _ , __ ): \"\"\" Check for the health of the service. \"\"\" return { \"status\" : \"OK\" } get_objects_id ( request ) Get info about a DrsObject . Parameters: Name Type Description Default request Request An instance of pyramid.request.Request required Returns: Type Description DrsReturnObject An instance of DrsReturnObject Source code in sandbox_storage/api.py @view_config ( route_name = \"objects_id\" , renderer = \"json\" , openapi = True , request_method = \"GET\" ) def get_objects_id ( request : Request ) -> DrsReturnObject : \"\"\" Get info about a ``DrsObject``. Args: request: An instance of ``pyramid.request.Request`` Returns: An instance of ``DrsReturnObject`` \"\"\" object_id = request . matchdict [ \"object_id\" ] db = get_session () target_object = ( db . query ( DrsObject ) . filter ( DrsObject . drs_id == object_id ) . one_or_none () ) if target_object is not None : access_url = AccessURL ( url = target_object . path ) access_method = AccessMethod ( access_url = access_url ) drs_object = DrsReturnObject ( id = target_object . drs_id , self_uri = CONFIG_SETTINGS . drs_path + target_object . drs_id , size = target_object . size , created_time = target_object . created_time . isoformat () + \"Z\" , checksums = [ { \"checksum\" : target_object . checksum_md5 , \"type\" : \"md5\" , } ], access_methods = [ access_method ], ) return drs_object raise HTTPNotFound ( json = { \"msg\" : \"The requested 'DrsObject' wasn't found\" , \"status_code\" : 404 } ) get_objects_id_access_id ( request ) Get a URL for fetching bytes. Parameters: Name Type Description Default request Request An instance of pyramid.request.Request required Returns: Type Description AccessURL An instance of AccessURL Source code in sandbox_storage/api.py @view_config ( route_name = \"objects_id_access_id\" , renderer = \"json\" , openapi = True , request_method = \"GET\" , ) def get_objects_id_access_id ( request : Request ) -> AccessURL : \"\"\" Get a URL for fetching bytes. Args: request: An instance of ``pyramid.request.Request`` Returns: An instance of ``AccessURL`` \"\"\" object_id = request . matchdict [ \"object_id\" ] access_id = request . matchdict [ \"access_id\" ] db = get_session () target_object = ( db . query ( DrsObject ) . filter ( DrsObject . drs_id == object_id ) . one_or_none () ) if target_object is None : raise HTTPBadRequest ( json = { \"msg\" : \"The requested 'DrsObject' wasn't found\" , \"status_code\" : 400 } ) if access_id == \"s3\" : send_message ( object_id , access_id , \"user_id\" ) # Connect to s3 s3_client = boto3 . client ( service_name = \"s3\" , endpoint_url = S3_PATH , ) # Get presigned URL response = s3_client . generate_presigned_url ( \"get_object\" , Params = { \"Bucket\" : \"test\" , \"Key\" : object_id }, ExpiresIn = 86400 , ) # change path to localhost path = \"http://localhost:4566\" + response . removeprefix ( CONFIG_SETTINGS . s3_path ) return AccessURL ( url = path ) raise HTTPBadRequest ( json = { \"msg\" : \"The requested access method does not exist\" , \"status_code\" : 400 } ) index ( _ , __ ) Index Enpoint, returns 'Hello World' Source code in sandbox_storage/api.py @view_config ( route_name = \"hello\" , renderer = \"json\" , openapi = False , request_method = \"GET\" ) def index ( _ , __ ): \"\"\" Index Enpoint, returns 'Hello World' \"\"\" return { \"content\" : \"Hello World!\" }","title":"API routes"},{"location":"reference/routes/#api-routes","text":"Provides the API endpoints for storage.","title":"API routes"},{"location":"reference/routes/#sandbox_storage.api.AccessMethod","text":"An AccessURL","title":"AccessMethod"},{"location":"reference/routes/#sandbox_storage.api.AccessURL","text":"Describes the URL for accessing the actual bytes of the object.","title":"AccessURL"},{"location":"reference/routes/#sandbox_storage.api.DrsReturnObject","text":"A DrsObject","title":"DrsReturnObject"},{"location":"reference/routes/#sandbox_storage.api.get_app","text":"Builds the Pyramid app Parameters: Name Type Description Default config_settings Settings for the application ModSettings(host='127.0.0.1', port=8080, log_level='info', drs_path='drs://localhost:8080/', api_path='/ga4gh/drs/v1', custom_spec_url=None, rabbitmq_host='rabbitmq', rabbitmq_port=5672, topic_name='download_request', db_path='postgresql://admin:admin@postgresql/storage', s3_path='http://s3-localstack:4566', cors_allowed_origins=[], cors_allow_credentials=False, cors_allowed_methods=[], cors_allowed_headers=[]) Returns: Type Description Any An instance of Pyramid WSGI app Source code in sandbox_storage/api.py def get_app ( config_settings = CONFIG_SETTINGS ) -> Any : \"\"\" Builds the Pyramid app Args: config_settings: Settings for the application Returns: An instance of Pyramid WSGI app \"\"\" api_path = Path ( config_settings . api_path ) openapi_spec_path = Path ( __file__ ) . parent / \"openapi.yaml\" with Configurator () as pyramid_config : pyramid_config . add_directive ( \"pyramid_custom_openapi3_add_explorer\" , add_custom_explorer_view ) pyramid_config . add_subscriber ( cors_header_response_callback_factory ( config_settings ), NewRequest ) pyramid_config . include ( \"pyramid_openapi3\" ) pyramid_config . pyramid_openapi3_spec ( openapi_spec_path , route = str ( api_path / \"openapi.yaml\" ) ) pyramid_config . pyramid_custom_openapi3_add_explorer ( route = str ( api_path ), custom_spec_url = config_settings . custom_spec_url ) pyramid_config . add_route ( \"hello\" , \"/\" ) pyramid_config . add_route ( \"health\" , \"/health\" ) pyramid_config . add_route ( \"objects_id\" , str ( api_path / \"objects\" / \" {object_id} \" ) ) pyramid_config . add_route ( \"objects_id_access_id\" , str ( api_path / \"objects\" / \" {object_id} \" / \"access\" / \" {access_id} \" ), ) pyramid_config . scan ( \".\" ) return pyramid_config . make_wsgi_app ()","title":"get_app()"},{"location":"reference/routes/#sandbox_storage.api.get_health","text":"Check for the health of the service. Source code in sandbox_storage/api.py @view_config ( route_name = \"health\" , renderer = \"json\" , openapi = False , request_method = \"GET\" ) def get_health ( _ , __ ): \"\"\" Check for the health of the service. \"\"\" return { \"status\" : \"OK\" }","title":"get_health()"},{"location":"reference/routes/#sandbox_storage.api.get_objects_id","text":"Get info about a DrsObject . Parameters: Name Type Description Default request Request An instance of pyramid.request.Request required Returns: Type Description DrsReturnObject An instance of DrsReturnObject Source code in sandbox_storage/api.py @view_config ( route_name = \"objects_id\" , renderer = \"json\" , openapi = True , request_method = \"GET\" ) def get_objects_id ( request : Request ) -> DrsReturnObject : \"\"\" Get info about a ``DrsObject``. Args: request: An instance of ``pyramid.request.Request`` Returns: An instance of ``DrsReturnObject`` \"\"\" object_id = request . matchdict [ \"object_id\" ] db = get_session () target_object = ( db . query ( DrsObject ) . filter ( DrsObject . drs_id == object_id ) . one_or_none () ) if target_object is not None : access_url = AccessURL ( url = target_object . path ) access_method = AccessMethod ( access_url = access_url ) drs_object = DrsReturnObject ( id = target_object . drs_id , self_uri = CONFIG_SETTINGS . drs_path + target_object . drs_id , size = target_object . size , created_time = target_object . created_time . isoformat () + \"Z\" , checksums = [ { \"checksum\" : target_object . checksum_md5 , \"type\" : \"md5\" , } ], access_methods = [ access_method ], ) return drs_object raise HTTPNotFound ( json = { \"msg\" : \"The requested 'DrsObject' wasn't found\" , \"status_code\" : 404 } )","title":"get_objects_id()"},{"location":"reference/routes/#sandbox_storage.api.get_objects_id_access_id","text":"Get a URL for fetching bytes. Parameters: Name Type Description Default request Request An instance of pyramid.request.Request required Returns: Type Description AccessURL An instance of AccessURL Source code in sandbox_storage/api.py @view_config ( route_name = \"objects_id_access_id\" , renderer = \"json\" , openapi = True , request_method = \"GET\" , ) def get_objects_id_access_id ( request : Request ) -> AccessURL : \"\"\" Get a URL for fetching bytes. Args: request: An instance of ``pyramid.request.Request`` Returns: An instance of ``AccessURL`` \"\"\" object_id = request . matchdict [ \"object_id\" ] access_id = request . matchdict [ \"access_id\" ] db = get_session () target_object = ( db . query ( DrsObject ) . filter ( DrsObject . drs_id == object_id ) . one_or_none () ) if target_object is None : raise HTTPBadRequest ( json = { \"msg\" : \"The requested 'DrsObject' wasn't found\" , \"status_code\" : 400 } ) if access_id == \"s3\" : send_message ( object_id , access_id , \"user_id\" ) # Connect to s3 s3_client = boto3 . client ( service_name = \"s3\" , endpoint_url = S3_PATH , ) # Get presigned URL response = s3_client . generate_presigned_url ( \"get_object\" , Params = { \"Bucket\" : \"test\" , \"Key\" : object_id }, ExpiresIn = 86400 , ) # change path to localhost path = \"http://localhost:4566\" + response . removeprefix ( CONFIG_SETTINGS . s3_path ) return AccessURL ( url = path ) raise HTTPBadRequest ( json = { \"msg\" : \"The requested access method does not exist\" , \"status_code\" : 400 } )","title":"get_objects_id_access_id()"},{"location":"reference/routes/#sandbox_storage.api.index","text":"Index Enpoint, returns 'Hello World' Source code in sandbox_storage/api.py @view_config ( route_name = \"hello\" , renderer = \"json\" , openapi = False , request_method = \"GET\" ) def index ( _ , __ ): \"\"\" Index Enpoint, returns 'Hello World' \"\"\" return { \"content\" : \"Hello World!\" }","title":"index()"}]}